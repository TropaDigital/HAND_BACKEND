name: Pull Request Validation Workflow
env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  MYSQL_ROOT_PASSWORD: haandbib
  MYSQL_DATABASE: haandbib
  MYSQL_PASSWORD: haandbib
  MYSQL_PORT: 3306
  MYSQL_USER: root

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate_pr:
    name: Check if PR is able to be merged
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:alpine3.13
        ports:
          - 6379
      mysql:
        image: bitnami/mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
        ports:
          - 3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - name: Use nodeJS ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Run ESLint to check the code style
        run: yarn lint

      - name: Run Unit Tests
        env:
          DATABASE_URL: mysql://${{ env.MYSQL_USER }}:${{ env.MYSQL_ROOT_PASSWORD }}@localhost:${{ job.services.mysql.ports[3306] }}/${{ env.MYSQL_DATABASE }}
          REDIS_HOSTNAME: localhost
          REDIS_PORT: ${{ job.services.redis.ports[6379] }}
        run: yarn test:unit:coverage

      - name: Generate jest coverage comment for unit tests
        uses: MishaKav/jest-coverage-comment@main
        with:
          coverage-summary-path: ./coverage/unit/coverage-final.json
          title: Unit Tests Code Coverage
          summary-title: Unit tests Summary Title
          badge-title: Unit Tests Code Coverage
          hide-comment: false
          create-new-comment: false
          hide-summary: false
          junitxml-title: Unit Tests Code Coverage
          junitxml-path: ./coverage/unit/junit.xml
          coverage-title: Unit Tests Code Coverage
          coverage-path: ./coverage/unit/coverage.txt
            

      - name: Run Integration Tests
        env:
          DATABASE_URL: mysql://${{ env.MYSQL_USER }}:${{ env.MYSQL_ROOT_PASSWORD }}@localhost:${{ job.services.mysql.ports[3306] }}/${{ env.MYSQL_DATABASE }}
          REDIS_HOSTNAME: localhost
          REDIS_PORT: ${{ job.services.redis.ports[6379] }}
        run: yarn test:functional:coverage

      - name: Generate jest coverage comment for functional tests
        uses: MishaKav/jest-coverage-comment@main
        with:
          coverage-summary-path: ./coverage/unit/coverage-final.json
          title: Functional Tests Code Coverage
          summary-title: functional tests Summary Title
          badge-title: Functional Tests Code Coverage
          hide-comment: false
          create-new-comment: false
          hide-summary: false
          junitxml-title: Functional Tests Code Coverage
          junitxml-path: ./coverage/functional/junit.xml
          coverage-title: Functional Tests Code Coverage
          coverage-path: ./coverage/functional/coverage.txt

